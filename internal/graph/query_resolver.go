package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"api-gateway/internal/graph/models"
	"context"
	"fmt"
)

// Ping is the resolver for the ping field.
func (r *queryResolver) Ping(ctx context.Context) (string, error) {
	return "pong", nil
}

// GetMerchants is the resolver for the getMerchants field.
func (r *queryResolver) GetMerchants(ctx context.Context) ([]models.Merchant, error) {
	res := []models.Merchant{}
	merchants, err := r.MerchantUseCase.GetMerchants()
	if err != nil {
		return res, err
	}

	for _, merchant := range merchants {
		chains := []models.CryptoChain{}
		if len(merchant.CryptoChains) > 0 {
			for _, chain := range merchant.CryptoChains {
				chains = append(chains, models.CryptoChain{
					ID:        chain.Id.String(),
					Name:      chain.Name,
					Symbol:    chain.Symbol,
					CreatedAt: chain.CreatedAt.String(),
				})
			}
		}

		res = append(res, models.Merchant{
			ID:           merchant.Id.String(),
			Name:         merchant.Name,
			Location:     merchant.Location,
			Latitude:     merchant.Latitude,
			Longitude:    merchant.Longitude,
			CreatedAt:    merchant.CreatedAt.String(),
			CryptoChains: chains,
		})
	}

	return res, nil
}

// GetMerchantByID is the resolver for the getMerchantByID field.
func (r *queryResolver) GetMerchantByID(ctx context.Context, id string) (*models.Merchant, error) {
	merchant, err := r.MerchantUseCase.GetMerchantById(id)
	if err != nil {
		return nil, fmt.Errorf("error fetching merchant: %w", err)
	}

	var chains []models.CryptoChain
	if len(merchant.CryptoChains) > 0 {
		for _, chain := range merchant.CryptoChains {
			chains = append(chains, models.CryptoChain{
				ID:        chain.Id.String(),
				Name:      chain.Name,
				Symbol:    chain.Symbol,
				CreatedAt: chain.CreatedAt.String(),
			})
		}
	}

	return &models.Merchant{
		ID:           merchant.Id.String(),
		Name:         merchant.Name,
		Location:     merchant.Location,
		Latitude:     merchant.Latitude,
		Longitude:    merchant.Longitude,
		CreatedAt:    merchant.CreatedAt.String(),
		CryptoChains: chains,
	}, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
